function [DMP, W, Am, Ym, tau, dt, time, Traj, F, init_pos, init_vel, DMP_traj] = learn_rcp_batch(ts0)% function to learn a RCP in batch mode using an arbitrary periodic trajectory as% template% clear all; close all;global rcps;%%% general parametersdt     = 0.01;ym     = 0;     % baseline of the trajectoryA      = 1;     % amplitude of the oscillatorn_rfs  = 100;    % number of kernel functionsID     = 1;for j=1:6        ID = j;    [tau, ym, omega, T] = Trajectory(j,ts0); % loading the motion data trajectory and some of its determining parameters like baseline and period% initialize some arrays for data monitoring% T   = zeros(round(2*tau/dt+1),3);tau=1.13;% tau=.56;omega=2*pi;Td              =   diff(T)/dt;init_pos(j,1)   =   T(1,1);init_vel(j,1)   =   Td(1,1);% ym=26;%% Do the phase, trajectory and weight calculations for each of the 6 DOFsP   = zeros(length(T),2);      % PhaseZ   = zeros(length(T),2);      % has to do with y_dotY   = zeros(length(T),3);      % The learned or fitted trajectoryPSI = zeros(length(T),n_rfs);  % Gaussian functionsW   = zeros(length(T),n_rfs);  % Weight factors%% Initialize some cases from the rcp code to set the values of the parameters% this rcp will learn from the target datarcp('init',ID,n_rfs,'learn_rcp_incremental');rcp('reset_state',ID);rcp('set_baseline',ID,ym);rcp('set_amplitude',ID,A);%% calculate the derivatives of the desired or demonstrated trajectory% % create target data from Fourier series% omega = 2*pi/tau;% for i=0:2*tau/dt,%   t   = sin(omega*dt*i) + .25*cos(2*omega*dt*i + 0.77) + 0.1*sin(3*omega*dt*i+3);%   td  = omega*cos(omega*dt*i) - 2*omega*.25*sin(2*omega*dt*i + 0.77) + 3*omega*0.1*cos(3*omega*dt*i+3);%   tdd = -omega^2*sin(omega*dt*i) - (2*omega)^2*.25*cos(2*omega*dt*i + 0.77) - (3*omega)^2*0.1*sin(3*omega*dt*i+3);%   T(i+1,:)   = [t td tdd];% end;% % % batch fitting% [Yp,Ypd,Ypdd]=rcp('batch_fit',ID,tau,dt,T(:,1),T(:,2),T(:,3));%% cubic b-spline% if j==1 || j==4% spfactor=3;% k=4;% Kpos=T(156:173,1);% s=size(Kpos)% tt=(155*dt:dt:172*dt)';% % Kasp=Kpos;% sp1x=spap2(fix(s(1)/spfactor),k,tt,Kpos);% Pos=fnval(fnder(sp1x,0),tt);% % T=[T(1:155,1); Pos; T(174:end,1)];% % end%%% if j==1 || j==4% T(156:173,1)=T(156,1)+(T(173,1)-T(156,1))*(1:18)'/17;% endTd               = diff(T)/dt;Td               = [Td; Td(end)];Tdd              = diff(Td)/dt;Tdd              = [Tdd; Tdd(end)];T = [T Td Tdd];len=length(T);%% Coupled phase generator for 6 DOFs based on a reference phase:::  1:Left Hip  2:Left Knee  3:Left Ankle // 4:Right Hip  5:Right Knee  6:Right Ankle% In this part, we first do the phase generation by taking advantage of the% equations in Ali's paper. Please refer to Equation (2)k=1;   %The constant for couplingP1=zeros(len,1);P2=zeros(len,1);P3=zeros(len,1);P4=zeros(len,1);P5=zeros(len,1);P6=zeros(len,1);Pr=zeros(len,1);   % reference phaseomega=pi/tau;   % The value of omega in Eq. (2), which is supposed to be equal to 2pi/T, where T is the time period of the motion or a stride.% p1d=omega;% p2d=omega;% p3d=omega;% p4d=omega;% p5d=omega;% p6d=omega;% prd=omega;% p1=pi;% p2=pi;% p3=pi;% p4=0;% p5=0;% p6=0;%%% these initial values are the starting point to make sure that the phase difference of pi remains always the same between the left and the right limb%%% Right limb is assumed to have a pi radians lag with respect to the left onep1=0;p2=0;p3=0;p4=0;p5=0;p6=0;pr=pi/2;% pr=pi/56;%%% The additional term considering for the phase resetting, which needs to take into accounts some threshold value like t_HE%%% Assumed to equal zero for nowdelta1=0; delta2=0; delta3=0; delta4=0; delta5=0; delta6=0;for i=1:len            P1(i,1)=p1;    P2(i,1)=p2;    P3(i,1)=p3;    P4(i,1)=p4;    P5(i,1)=p5;    P6(i,1)=p6;        Pr(i,1)=pr;        k=0;        p1d=omega-k*sin(p1-pr+pi/2)+(0-p1)*delta1;  % The implemented equation adapted from Ali's paper:: equation for Phi_i_dot (i=1,...,6)    p2d=omega-k*sin(p2-pr+pi/2)+(0-p2)*delta2;  % " " "    p3d=omega-k*sin(p3-pr+pi/2)+(0-p3)*delta3;  % " " "    p4d=omega-k*sin(p4-pr-pi/2)+(pi-p4)*delta4; % " " "    p5d=omega-k*sin(p5-pr-pi/2)+(pi-p5)*delta5; % " " "    p6d=omega-k*sin(p6-pr-pi/2)+(pi-p6)*delta6; % " " "    prd=omega-k*(sin(pr-p1-pi/2)+sin(pr-p2-pi/2)+sin(pr-p3-pi/2)+sin(pr-p4+pi/2)+sin(pr-p5+pi/2)+sin(pr-p6+pi/2)); % The equation adapted from Ali's paper:: equation for Phi_ref_dot        %%% Forward Euler formulation to obtain the limbs phase values    pr=pr+prd*dt;    p1=p1+p1d*dt;    p2=p2+p2d*dt;    p3=p3+p3d*dt;    p4=p4+p4d*dt;    p5=p5+p5d*dt;    p6=p6+p6d*dt;%%% Perturbation in phase%     if i==100%         %         pr=pr-2;%         %     end    end%%% Limbs phase values matrixPh=[P1 P2 P3 P4 P5 P6];%% run "batch fit" case of the rcp code and train the model with the demonstrated data% batch fitting[Yp,Ypd,Ypdd]=rcp('batch_fit',ID,tau,dt,Ph(:,j),T(:,1),Td,Tdd);% figure(j)  % plot((0:length(T)-1)',[Yp(:,1),T(:,1)])%% create predicted trajectoryrcp('reset_state_new',ID,T(:,1),tau,dt);rcp('set_baseline',ID,ym);rcp('set_amplitude',ID,A);%% run "run" case from the rcp code to get the trajectoryfor i=0:length(T)-1,  [y,yd,ydd]=rcp('run',ID,tau,dt);  P(i+1,:)   = [rcps(ID).p rcps(ID).pd];  Z(i+1,:)   = [rcps(ID).z rcps(ID).zd];  Y(i+1,:)   = [y yd ydd];  %   if j==2 || j==5%       y(y==)  DMP_traj(i+1,j) = y;%   if j==2 || j==5%   if Y(i+1,1)<0%       Y(i+1,1) = 0;%   end%   end    PSI(i+1,:) = rcps(ID).psi';  W(i+1,:,:) = rcps(ID).w;end;    if j==2 || j==5        DMP_traj(DMP_traj(:,j)<0,j)=0;    end    %   P(1,1)   = [];%   Z(1,1)   = [];%   Y(1,1)   = [];  %% %%%%% % % figure(j)  % % % plot((0:length(T)-1)',[Y(1:end,1),T(:,1)])% % % legend('DMP','Demo')%% %%%%% if j==1 || j==4%     Y(156:173,1)=Y(156,1)+(Y(173,1)-Y(156,1))*(1:18)'/17;%     T(156:173,1)=T(156,1)+(T(173,1)-T(156,1))*(1:18)'/17;% end% Set up the initial trajectory bridging the double-stance phase to the% onset of the DMP Trajectoryif j==1 || j==4 || j==2DMP_init = Y(2,1)*(0:59)'/59;T_init = T(1,1)*(0:59)'/59;elseif  j==3 || j==6    DMP_init = zeros(60,1);    T_init = zeros(60,1);    elseif j==5    ii=(0:59)';    DMP_init = -(10/29^2)*(ii-29).^2+10;    T_init = zeros(60,1);end% if j==1    %     plot(P,PSI)    % Traj(:,j) = [DMP_init ; [Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)]];% Tr(:,1) = [T_init ; T(:,1); T(:,1); T(:,1); T(:,1); T(:,1)];% % Traj(:,j) = [[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)];[Y(2,1) ; Y(2:end,1)]];% Tr(:,1) = [T(:,1); T(:,1); T(:,1); T(:,1); T(:,1)];% % Traj(:,j) = [T(:,1)];% Traj(:,j) = [Traj_init ; repmat([Y(2,1) ; Y(2:end,1)],5,1);%%%% plottingtime = (0:dt:dt*(length(T)-1))';ta = time(end);% % % % % % % % % figure(j+1);% % % clf;% % % % % % % % plot position, velocity, acceleration vs. target% % % subplot(331);% % % plot(time,[Traj(:,j) Tr(:,1)]) ;% % % title('Joint Angle');% % % aa=axis;% % % axis([min(time) max(time) aa(3:4)]);% % % ylabel('y (deg)')% % % % % % subplot(332);% % % plot(time,[Traj(:,j) Tr(:,1)]);% % % title('Angular Velocity');% % % aa=axis;% % % axis([min(time) max(time) aa(3:4)]);% % % ylabel('y_dot (deg/s)')% % % % % % subplot(333);% % % plot(time,[Traj(:,j) Tr(:,1)]);% % % title('Angular Acceleration');% % % aa=axis;% % % axis([min(time) max(time) aa(3:4)]);% % % ylabel('y_ddot (deg/s^2)')%%%%% plot internal states% subplot(334);% plot(time,Z(:,1));% title('z');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% % subplot(335);% plot(time,Z(:,2));% title('zd');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% % subplot(336);% plot(time,PSI);% title('Weighting Kernels');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% % subplot(337);% plot(time,Ph(:,j));% title('p');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% % subplot(338);% plot(time,P(:,2));% title('pd');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% % subplot(339);% plot(W(end,:));% title('Weights');% xlabel(sprintf('tau=%f',tau));% % plot position, velocity, acceleration vs. target% subplot(331);% plot(time,[Traj(:,1) Tr(:,1)]) ;% title('Joint Angle');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('y (deg)')% % subplot(332);% plot(time,[Traj(:,2) Tr(:,2)]);% title('Angular Velocity');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('y-dot (deg/s)')% % subplot(333);% plot(time,[Traj(:,3) Tr(:,3)]);% title('Angular Acceleration');% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('y-ddot (deg/s^2)')% % % plot internal states% subplot(334);% plot(time,Z(:,1));% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('z (deg/s)')% % subplot(335);% plot(time,Z(:,2));% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('z-dot (deg/s^2)')% % subplot(336);% plot(time,PSI);% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('\psi')% % subplot(337);% plot(time,Ph(:,j));% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('\phi')% xlabel('Time (s)')% % subplot(338);% plot(time,P(:,2));% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('\phi-dot')% xlabel('Time (s)')% % subplot(339);% plot(W(end,:));% xlabel('Time (s)')% ylabel('W')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% figure (10)% % if j==1%     r=1;%     titl = 'Left Hip';% elseif j==2%     titl = 'Left Knee';%     r=3;% elseif j==3%     titl = 'Left Ankle';%     r=5;% elseif j==4%     titl = 'Right Hip';%     r=2;% elseif j==5%     titl = 'Right Knee';%     r=4;% else%     r=6;%     titl = 'Right Ankle';% end% % subplot(3,2,r)% % Y(1:end,1),T(:,1)% plot(time,T(:,1),'k','LineWidth',1.2) ;% hold on% plot(time, Y(:,1), '--k','LineWidth',1.5)% aa=axis;% axis([min(time) max(time) aa(3:4)]);% titles = title(titl,'FontSize',5);% titles.FontSize = 3;% if r==5 || r==6% xlabel('Time (sec)')% end% if r == 3% ylabel('Lower-extremity Joint Angle Trajectories (deg)')% end% ylim([min(T(:,1))-10 max(Y(:,1))+10])% % [cor, pv]=corr(T(:,1),Y(:,1));% RMSE = sqrt(mean((T(:,1)-Y(:,1)).^2));% text(1,0,['R^2 = ', num2str(cor)],'FontSize',14);% text(1,20,['RMSE = ', num2str(RMSE)],'FontSize',14);% if j==1% lgd = legend ('DMP Trajectory', 'Actual Trajectory')% legend boxoff% lgd.FontSize = 14;% end% ax=gca;% set(ax,'FontSize',18,'Box','off')% % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% orig = T(1:113,1);% % for i=0:20% r_ank_cy(:,i) = r_ank(113*i+1:113*(i+1));% r_kn_cy(:,i) = r_kn(113*i+1:113*(i+1));% r_hip_cy(:,i) = r_hip(113*i+1:113*(i+1));% l_ank_cy(:,i) = l_ank(113*i+1:113*(i+1));% l_kn_cy(:,i) = l_kn(113*i+1:113*(i+1));% l_hip_cy(:,i) = l_hip(113*i+1:113*(i+1));% % if j==1%     Trajec = l_hip_cy(:,i);% elseif j==2%     Trajec = l_kn_cy(:,i);% elseif j==3%     Trajec = l_ank_cy(:,i);% elseif j==4%     Trajec = r_hip_cy(:,i);% elseif j==5%     Trajec = r_kn_cy(:,i);% else%     Trajec = r_ank_cy(:,i);% end% % figure (11)% % % % % % % % subplot(3,2,r)% % Y(1:end,1),T(:,1)% % if i==1% plot (time(1:113,1),orig, ':k', 'LineWidth', 1.5)% end% hold on% plot(time(1:113,1),Trajec)% aa=axis;% axis([min(time) max(time) aa(3:4)]);% titles = title(titl,'FontSize',5);% titles.FontSize = 3;% if r==5 || r==6% xlabel('Time (sec)')% end% if r == 3% ylabel('Lower-extremity Joint Angle Trajectories (deg)')% end% ylim([min(T(:,1))-10 max(Y(:,1))+10])% % % [cor, pv]=corr(T(:,1),Y(:,1));% % RMSE = sqrt(mean((T(:,1)-Y(:,1)).^2));% % text(1,0,['R^2 = ', num2str(cor)],'FontSize',14);% % text(1,20,['RMSE = ', num2str(RMSE)],'FontSize',14);% if j==1% lgd = legend ('DMP Trajectory', 'Actual Trajectory')% legend boxoff% lgd.FontSize = 14;% end% ax=gca;% set(ax,'FontSize',18,'Box','off')%%%%%%% subplot(312);% subplot(132);% % plot(time,[Y(:,2) T(:,2)]);% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('Angular Velocity (deg/s)')% ylim([min(Y(:,2))-10 max(Y(:,2))+10])% % subplot(313);% subplot(133);% % plot(time,[Y(:,3) T(:,3)]);% aa=axis;% axis([min(time) max(time) aa(3:4)]);% ylabel('Angular Acceleration (deg/s^2)')% xlabel('Time (s)')% ylim([min(Y(:,3))-10 max(Y(:,3))+10])if j==1        jj='Left Hip';elseif j==2    jj='Left Knee';elseif j==3    jj='Left Ankle';elseif j==4    jj='Right Hip';elseif j==5    jj='Right Knee';elseif j==6    jj='Right Ankle';    end% suptitle([jj,' DOF'], 'FontSize',25)% % drawnow;end% Force to push the robot at the beginning% F = [200;zeros(length(time)-1,1)];F = [55;zeros(length(time)-1,1)];F = [40;zeros(length(time)-1,1)];F = [80;zeros(length(time)-1,1)];% F = [120;zeros(length(time)-1,1)];% F = [130;zeros(length(time)-1,1)];% F = [65;zeros(length(time)-1,1)];F = [50;zeros(length(time)-1,1)];% figure(10);% hold on% h(1)=plot(time,Pr);% h(2)=plot(time,Ph(:,1));% h(3)=plot(time,Ph(:,2));% h(4)=plot(time,Ph(:,3),'r');% h(5)=plot(time,Ph(:,4));% h(6)=plot(time,Ph(:,5));% h(7)=plot(time,Ph(:,6),'g');% legend(h([1 4 7]),'\phi_{ref}','\phi_1, \phi_2, \phi_3','\phi_4, \phi_5, \phi_6');% grid on;% xlabel('Time (sec)')% ylabel('Phase states (rad)')DMP=rcps;% time=(0:.01:0.01*(1000-1+60))';Traj = zeros(1,6);ta = time(end);% DMP = repmat(DMP,length(time),1);% for i=1:6%     i=ID;%     w(i,:)=% Data=[time, Traj];W=[DMP(1).w DMP(2).w DMP(3).w DMP(4).w DMP(5).w DMP(6).w];% Am=.95*[DMP(1).A DMP(2).A DMP(3).A DMP(4).A DMP(5).A DMP(6).A];Am=1;Ym=[DMP(1).ym DMP(2).ym DMP(3).ym DMP(4).ym DMP(5).ym DMP(6).ym];%% create predicted trajectoryfor j=1:6    ID=j;    rcp('reset_state',ID);    rcp('set_baseline',ID,ym);    rcp('set_amplitude',ID,A);end% % % % % % % % % tau = 1.13;end% save('Traj_DMP.mat','Data')